package tj.integration.jei.multi;

import gregicadditions.GAValues;
import gregicadditions.item.GAMetaBlocks;
import gregicadditions.item.fusion.GACryostatCasing;
import gregicadditions.item.fusion.GADivertorCasing;
import gregicadditions.item.fusion.GAFusionCasing;
import gregicadditions.item.fusion.GAVacuumCasing;
import gregicadditions.jei.GAMultiblockShapeInfo;
import gregicadditions.machines.GATileEntities;
import gregtech.api.metatileentity.multiblock.MultiblockControllerBase;
import gregtech.integration.jei.multiblock.MultiblockShapeInfo;
import net.minecraft.util.EnumFacing;
import tj.integration.jei.TJMultiblockInfoPage;
import tj.machines.TJMetaTileEntities;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import static gregtech.api.multiblock.BlockPattern.RelativeDirection.*;

public class MegaFusionInfo extends TJMultiblockInfoPage {

    @Override
    public MultiblockControllerBase getController() {
        return TJMetaTileEntities.MEGA_FUSION;
    }

    @Override
    public List<MultiblockShapeInfo> getMatchingShapes() {
        List<String[]> pattern = new ArrayList<>();
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~", "~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~", "~~~~~~~~~cccc~~~~~~~~~~~~~~~~~~~~~cccc~~~~~~~~~", "~~~~~~~~~~cc~~~~~~~~~~~~~~~~~~~~~~~cc~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~cc~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~cc~~~~~~", "~~~~~cccc~~~~~~~~~~CCCCCCCCC~~~~~~~~~~cccc~~~~~", "~~~~~~cc~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~cc~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~CCCCCCCCC~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~cc~~~~~~~~~~~~~~~~~~~~~~~cc~~~~~~~~~~", "~~~~~~~~~cccc~~~~~~~~~~~~~~~~~~~~~cccc~~~~~~~~~", "~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~", "~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~BBBBBBBBB~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~BBBBBBBBBBBBBBBBB~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~BBBBBB~~~ccc~~~BBBBBB~~~~~~~~~~~~~", "~~~~~~~~~~cBBBB~~~~~~~~c~~~~~~~~BBBBc~~~~~~~~~~", "~~~~~~~~~cBBB~~~~~~~~~~~~~~~~~~~~~BBBc~~~~~~~~~", "~~~~~~~~~BBBcc~~~~~~~~~~~~~~~~~~~ccBBB~~~~~~~~~", "~~~~~~~~~BBcc~~~~~~~~~~~~~~~~~~~~~ccBB~~~~~~~~~", "~~~~~~~~BB~c~~~~~~~~~~~~~~~~~~~~~~~c~BB~~~~~~~~", "~~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~CCCCCCCCC~~~~~~~~~~BB~~~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~cBBc~~~~~~~~~CcccccccccC~~~~~~~~~cBBc~~~~~", "~~~~ccBBcc~~~~~~~~CcccccccccC~~~~~~~~ccBBcc~~~~", "~~~~~cBBc~~~~~~~~~CcccccccccC~~~~~~~~~cBBc~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~~BB~~~~~~~~~~CcccccccccC~~~~~~~~~~BB~~~~~~", "~~~~~~~BB~~~~~~~~~~CCCCCCCCC~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~", "~~~~~~~~BB~~~~~~~~~~~~~~~~~~~~~~~~~~~BB~~~~~~~~", "~~~~~~~~BB~c~~~~~~~~~~~~~~~~~~~~~~~c~BB~~~~~~~~", "~~~~~~~~~BBcc~~~~~~~~~~~~~~~~~~~~~ccBB~~~~~~~~~", "~~~~~~~~~BBBcc~~~~~~~~~~~~~~~~~~~ccBBB~~~~~~~~~", "~~~~~~~~~cBBB~~~~~~~~~~~~~~~~~~~~~BBBc~~~~~~~~~", "~~~~~~~~~~cBBBB~~~~~~~~c~~~~~~~~BBBBc~~~~~~~~~~", "~~~~~~~~~~~~~BBBBBB~~~ccc~~~BBBBBB~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~BBBBBBBBBBBBBBBBB~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~BBBBBBBBB~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~eeeBBBeee~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~eeeeBBBBBBBBBeeee~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~eeBBBBBBBBBBBBBBBBBee~~~~~~~~~~~~~", "~~~~~~~~~~ceeBBBBBBBBBBBBBBBBBBBBBeec~~~~~~~~~~", "~~~~~~~~~cBBBBBBBBB~~~ccc~~~BBBBBBBBBc~~~~~~~~~", "~~~~~~~~cBBBBBB~~~~~~~~c~~~~~~~~BBBBBBc~~~~~~~~", "~~~~~~~~eBBBBc~~~~~~~~~~~~~~~~~~~cBBBBe~~~~~~~~", "~~~~~~~~eBBBcc~~~~~~~~~~~~~~~~~~~ccBBBe~~~~~~~~", "~~~~~~~eBBBcc~~~~~~~~~~~~~~~~~~~~~ccBBBe~~~~~~~", "~~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~~", "~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~~CCCCCCCCC~~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~CcccccccccC~~~~~~~~BBBe~~~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~cBBBBc~~~~~~~CcccccccccccC~~~~~~~cBBBBc~~~~", "~~~ccBBBBcc~~~~~~CcccccccccccC~~~~~~ccBBBBcs~~~", "~~~~cBBBBc~~~~~~~CcccccccccccC~~~~~~~cBBBBc~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~~eBBB~~~~~~~~CcccccccccccC~~~~~~~~BBBe~~~~~", "~~~~~~eBBB~~~~~~~~CcccccccccC~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~~CCCCCCCCC~~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~", "~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~", "~~~~~~~eBBB~~~~~~~~~~~~~~~~~~~~~~~~~BBBe~~~~~~~", "~~~~~~~eBBBcc~~~~~~~~~~~~~~~~~~~~~ccBBBe~~~~~~~", "~~~~~~~~eBBBcc~~~~~~~~~~~~~~~~~~~ccBBBe~~~~~~~~", "~~~~~~~~eBBBBc~~~~~~~~~~~~~~~~~~~cBBBBe~~~~~~~~", "~~~~~~~~cBBBBBB~~~~~~~~c~~~~~~~~BBBBBBc~~~~~~~~", "~~~~~~~~~cBBBBBBBBB~~~ccc~~~BBBBBBBBBc~~~~~~~~~", "~~~~~~~~~~ceeBBBBBBBBBBBBBBBBBBBBBeec~~~~~~~~~~", "~~~~~~~~~~~~~eeBBBBBBBBBBBBBBBBBee~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~eeeeBBBBBBBBBeeee~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~eeeBBBTTT~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~BBBBBBBBB~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~BBBBBBBBBBBBBBBBB~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~BBBBBBBBBBBBBBBBBBBBB~~~~~~~~~~~~~", "~~~~~~~~~~~BBBBBBBBBBBBBBBBBBBBBBBBB~~~~~~~~~~~", "~~~~~~~~~cBBBBBBBBBBBBBBBBBBBBBBBBBBBc~~~~~~~~~", "~~~~~~~~cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBc~~~~~~~~", "~~~~~~~~BBBBBBBBBBB~~~ccc~~~BBBBBBBBBBB~~~~~~~~", "~~~~~~~BBBBBBBB~~~~~~~~c~~~~~~~~BBBBBBBB~~~~~~~", "~~~~~~~BBBBBBcc~~~~~~~~~~~~~~~~~ccBBBBBB~~~~~~~", "~~~~~~BBBBBBcc~~~~~~~~~~~~~~~~~~~ccBBBBBB~~~~~~", "~~~~~~BBBBBBc~~~~~~~~~~~~~~~~~~~~~cBBBBBB~~~~~~", "~~~~~BBBBBB~~~~~~~~~~~~~~~~~~~~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~~~CCCCCCCCC~~~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~~CcccccccccC~~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~CcccccccccccC~~~~~~BBBBBB~~~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~cBBBBBBc~~~~~CcccccccccccccC~~~~~cBBBBBBc~~~", "~~ccBBBBBBcc~~~~CcccccccccccccC~~~~ccBBBBBBcc~~", "~~~cBBBBBBc~~~~~CcccccccccccccC~~~~~cBBBBBBc~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~~BBBBBB~~~~~~CcccccccccccccC~~~~~~BBBBBB~~~~", "~~~~~BBBBBB~~~~~~CcccccccccccC~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~~CcccccccccC~~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~~~CCCCCCCCC~~~~~~~~BBBBBB~~~~~", "~~~~~BBBBBB~~~~~~~~~~~~~~~~~~~~~~~~~BBBBBB~~~~~", "~~~~~~BBBBBBc~~~~~~~~~~~~~~~~~~~~~cBBBBBB~~~~~~", "~~~~~~BBBBBBcc~~~~~~~~~~~~~~~~~~~ccBBBBBB~~~~~~", "~~~~~~~BBBBBBcc~~~~~~~~~~~~~~~~~ccBBBBBB~~~~~~~", "~~~~~~~BBBBBBBB~~~~~~~~c~~~~~~~~BBBBBBBB~~~~~~~", "~~~~~~~~BBBBBBBBBBB~~~ccc~~~BBBBBBBBBBB~~~~~~~~", "~~~~~~~~cBBBBBBBBBBBBBBBBBBBBBBBBBBBBBc~~~~~~~~", "~~~~~~~~~cBBBBBBBBBBBBBBBBBBBBBBBBBBBc~~~~~~~~~", "~~~~~~~~~~~BBBBBBBBBBBBBBBBBBBBBBBBB~~~~~~~~~~~", "~~~~~~~~~~~~~BBBBBBBBBBBBBBBBBBBBB~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~BBBBBBBBBBBBBBBBB~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~BBBBBBBBB~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~ccc~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~cV#########################Vc~~~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~RV###########VVVVVVVVV###########VR~~~~~~", "~~~~~RV########VVVV~~~ccc~~~VVVV########VR~~~~~", "~~~~~RV######VV~~~~~~~~c~~~~~~~~VV######VR~~~~~", "~~~~RV######Vcc~~~~~~~~~~~~~~~~~ccV######VR~~~~", "~~~~RV######Vc~~~~~~~~~~~~~~~~~~~cV######VR~~~~", "~~~RV######V~~~~~~~CCCCCCCCC~~~~~~~V######VR~~~", "~~~RV######V~~~~~~CcccccccccC~~~~~~V######VR~~~", "~~~RV######V~~~~~CcccccccccccC~~~~~V######VR~~~", "~~~RV######V~~~~CcccccccccccccC~~~~V######VR~~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~cV######Vc~~~CcccccccccccccccC~~~cV######Vc~~", "~ccV######Vcc~~CcccccccccccccccC~~ccV######Vcc~", "~~cV######Vc~~~CcccccccccccccccC~~~cV######Vc~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~RV######V~~~~CcccccccccccccccC~~~~V######VR~~", "~~~RV######V~~~~CcccccccccccccC~~~~V######VR~~~", "~~~RV######V~~~~~CcccccccccccC~~~~~V######VR~~~", "~~~RV######V~~~~~~CcccccccccC~~~~~~V######VR~~~", "~~~RV######V~~~~~~~CCCCCCCCC~~~~~~~V######VR~~~", "~~~~RV######Vc~~~~~~~~~~~~~~~~~~~cV######VR~~~~", "~~~~RV######Vcc~~~~~~~~~~~~~~~~~ccV######VR~~~~", "~~~~~RV######VV~~~~~~~~c~~~~~~~~VV######VR~~~~~", "~~~~~RV########VVVV~~~ccc~~~VVVV########VR~~~~~", "~~~~~~RV###########VVVVVVVVV###########VR~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~~~cV#########################Vc~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~RV#########################VR~~~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~RV###############################VR~~~~~~", "~~~~~RV#################################VR~~~~~", "~~~~RV#############VVVVVVVVV#############VR~~~~", "~~~~RV#########VVVV~~~ccc~~~VVVV#########VR~~~~", "~~~RV########VVc~~~~~~~c~~~~~~~cVV########VR~~~", "~~~RV########Vcc~~~~~~~c~~~~~~~ccV########VR~~~", "~~RV########Vcccc~~CCCCcCCCC~~ccccV########VR~~", "~~RV########V~~ccccccccccccccccc~~V########VR~~", "~~RV########V~~~ccccccccccccccc~~~V########VR~~", "~~RV########V~~~ccccccccccccccc~~~V########VR~~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~cV########Vc~~CcccccccccccccccC~~cV########Vc~", "ccV########VcccccccccccccccccccccccV########Vcc", "~cV########Vc~~CcccccccccccccccC~~cV########Vc~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~RV########V~~~CcccccccccccccccC~~~V########VR~", "~~RV########V~~~ccccccccccccccc~~~V########VR~~", "~~RV########V~~~ccccccccccccccc~~~V########VR~~", "~~RV########V~~ccccccccccccccccc~~V########VR~~", "~~RV########Vcccc~~CCCCcCCCC~~ccccV########VR~~", "~~~RV########Vcc~~~~~~~c~~~~~~~ccV########VR~~~", "~~~RV########VVc~~~~~~~c~~~~~~~cVV########VR~~~", "~~~~RV#########VVVV~~~ccc~~~VVVV#########VR~~~~", "~~~~RV#############VVVVVVVVV#############VR~~~~", "~~~~~RV#################################VR~~~~~", "~~~~~~RV###############################VR~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~~~RV#########################VR~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~~~~~c~~~~~~~~~~~~~~~~~~~~~~~"});
        pattern.add(new String[]{"~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~RV#########################VR~~~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~cV###############################Vc~~~~~~", "~~~~~RV#################################VR~~~~~", "~~~~RV###################################VR~~~~", "~~~RV#####################################VR~~~", "~~~RV##############VVVVVVVVV##############VR~~~", "~~RV###########VVVV~~~ccc~~~VVVV###########VR~~", "~~RV##########Vcc~~~~~ccc~~~~~ccV##########VR~~", "~RV##########Vcccc~ccccccccc~ccccV##########VR~", "~RV##########VcccccccccccccccccccV##########VR~", "~RV##########V~ccccccccccccccccc~V##########VR~", "~RV##########V~~ccccccccccccccc~~V##########VR~", "RV##########V~~ccccccccccccccccc~~V##########VR", "RV##########V~~ccccccccccccccccc~~V##########VR", "RV##########V~~ccccccccccccccccc~~V##########VR", "cV##########VcccccccccccccccccccccV##########Vc", "cV##########VcccccccccccccccccccccV##########Vc", "cV##########VcccccccccccccccccccccV##########Vc", "RV##########V~~ccccccccccccccccc~~V##########VR", "RV##########V~~ccccccccccccccccc~~V##########VR", "RV##########V~~ccccccccccccccccc~~V##########VR", "~RV##########V~~ccccccccccccccc~~V##########VR~", "~RV##########V~ccccccccccccccccc~V##########VR~", "~RV##########VcccccccccccccccccccV##########VR~", "~RV##########Vcccc~ccccccccc~ccccV##########VR~", "~~RV##########Vcc~~~~~ccc~~~~~ccV##########VR~~", "~~RV###########VVVV~~~ccc~~~VVVV###########VR~~", "~~~RV##############VVVVVVVVV##############VR~~~", "~~~RV#####################################VR~~~", "~~~~RV###################################VR~~~~", "~~~~~RV#################################VR~~~~~", "~~~~~~cV###############################Vc~~~~~~", "~~~~~~~cV#############################Vc~~~~~~~", "~~~~~~~~cV###########################Vc~~~~~~~~", "~~~~~~~~~RV#########################VR~~~~~~~~~", "~~~~~~~~~~RVV#####################VVR~~~~~~~~~~", "~~~~~~~~~~~RRVV#################VVRR~~~~~~~~~~~", "~~~~~~~~~~~~~RRVVVV#########VVVVRR~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~RRRRVVVVVVVVVRRRR~~~~~~~~~~~~~~~", "~~~~~~~~~~~~~~~~~~~RRRcccRRR~~~~~~~~~~~~~~~~~~~"});
        GAMultiblockShapeInfo.Builder builder = GAMultiblockShapeInfo.builder(LEFT, FRONT, DOWN);
        pattern.forEach(builder::aisle);
        for (int i = 0; i < pattern.size(); i++) {
            String[] aisle = pattern.get(i);
            String[] aisle2 = new String[aisle.length];
            for (int j = 0; j < aisle.length; j++) {
                aisle2[j] = aisle[j].replace("s", "S").replace("B", "D").replace("TTT", "MIO").replace("e", "H");
            }
            pattern.set(i, aisle2);
        }
        Collections.reverse(pattern);
        pattern.forEach(builder::aisle);
        builder.where('S', this.getController(), EnumFacing.WEST)
                .where('C', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.ADV_FUSION_CASING))
                .where('B', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.FUSION_BLANKET))
                .where('e', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.FUSION_BLANKET))
                .where('T', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.FUSION_BLANKET))
                .where('M', GATileEntities.MAINTENANCE_HATCH[2], EnumFacing.SOUTH)
                .where('I', TJMetaTileEntities.QUADRUPLE_QUADRUPLE_INPUT_HATCH, EnumFacing.SOUTH)
                .where('O', TJMetaTileEntities.QUADRUPLE_QUADRUPLE_OUTPUT_HATCH, EnumFacing.SOUTH);
        return Arrays.stream(GADivertorCasing.CasingType.values())
                .map(casingType -> builder.where('s', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.values()[casingType.ordinal() + 4]))
                        .where('c', GAMetaBlocks.FUSION_CASING.getState(GAFusionCasing.CasingType.values()[casingType.ordinal() + 4]))
                        .where('V', GAMetaBlocks.VACUUM_CASING.getState(GAVacuumCasing.CasingType.values()[casingType.ordinal()]))
                        .where('R', GAMetaBlocks.CRYOSTAT_CASING.getState(GACryostatCasing.CasingType.values()[casingType.ordinal()]))
                        .where('D', GAMetaBlocks.DIVERTOR_CASING.getState(casingType))
                        .where('H', this.getEnergyHatch(casingType.ordinal() + GAValues.UHV, false), EnumFacing.DOWN)
                        .build())
                .collect(Collectors.toList());
    }

    @Override
    public String[] getDescription() {
        return new String[]{" "};
    }

    @Override
    public float getDefaultZoom() {
        return 0.2F;
    }
}
